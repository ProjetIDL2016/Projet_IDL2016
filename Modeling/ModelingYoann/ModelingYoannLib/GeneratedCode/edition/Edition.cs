//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace edition
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using conversion;
    using donnee;

    public class Edition
    {
        public virtual Previsions creerPrevision(double Latitude1, double Longitude1, double Latitude2, double Longitude2, DateTime[] dateDebut,
                                                    DateTime[] dateFin, double[] vitesse, double[] direction, double[] pression, TypeVitesseVent type)
        {
            Previsions p = new Previsions();
            double pas = 0.5;
            double[] latitudes, longitudes, u, v;
            int nbX = 0, nbY = 0, duree;
            DateTime date;


            // Calcul des vecteurs u et v à partir de la vitesse et de la direction
            u = new double[vitesse.Length];
            v = new double[vitesse.Length];

            for(int i = 0; i < vitesse.Length; i++)
            {
                u[i] = conversion.Conversion.obtenirU(direction[i], vitesse[i]);
                v[i] = conversion.Conversion.obtenirV(direction[i], vitesse[i]);
            }


            // Calcul des coordonnées latitudes et longitudes
            nbX = Convert.ToInt32((Latitude2 - Latitude1) / pas) + 1;
            nbY = Convert.ToInt32((Longitude1 - Longitude2) / pas) + 1;


            // Création des tableaux de latitudes et longitudes
            // et ajout des latitudes et longitudes aux tableaux
            latitudes = new double[nbX];
            longitudes = new double[nbY];

            latitudes[0] = Latitude1;
            longitudes[0] = Longitude2;

            for (int x = 1; x < nbX; x++)
            {
                latitudes[x] = latitudes[x - 1] + pas;
            }

            for (int y = 1; y < nbY; y++)
            {
                longitudes[y] = longitudes[y - 1] + pas;
            }


            // Ajout des points par date
            for (int t = 0; t < dateDebut.Length; t++) // Pour chaque période
            {
                duree = Convert.ToInt32(dateFin[t].Subtract(dateDebut[t]).TotalHours); // Calcul de la durée de la periode en heures
                date = dateDebut[t];
                for (int h = 0; h < duree; h++) // Pour chaque heure pendant la durée de la période
                {
                    for (int x = 0; x < nbX; x++) // Pour chaque latitude
                    {
                        for (int y = 0; y < nbY; y++) // Pour chaque longitude
                        {
                            p.ajoutPoint(date.Year, date.Month, date.Day, date.Hour, latitudes[x], longitudes[y], pression[t], u[t], v[t]);
                        }
                    }
                    date = date.AddHours(1);
                }
            }

            return p;
        }
    }
}